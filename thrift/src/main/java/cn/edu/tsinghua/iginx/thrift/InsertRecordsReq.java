/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.iginx.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-11")
public class InsertRecordsReq implements org.apache.thrift.TBase<InsertRecordsReq, InsertRecordsReq._Fields>, java.io.Serializable, Cloneable, Comparable<InsertRecordsReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertRecordsReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("paths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMPS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamps", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("valuesList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTypeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("attributesList", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InsertRecordsReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InsertRecordsReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer timestamps; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valuesList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<DataType> dataTypeList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> attributesList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    PATHS((short)2, "paths"),
    TIMESTAMPS((short)3, "timestamps"),
    VALUES_LIST((short)4, "valuesList"),
    DATA_TYPE_LIST((short)5, "dataTypeList"),
    ATTRIBUTES_LIST((short)6, "attributesList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // PATHS
          return PATHS;
        case 3: // TIMESTAMPS
          return TIMESTAMPS;
        case 4: // VALUES_LIST
          return VALUES_LIST;
        case 5: // DATA_TYPE_LIST
          return DATA_TYPE_LIST;
        case 6: // ATTRIBUTES_LIST
          return ATTRIBUTES_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ATTRIBUTES_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PATHS, new org.apache.thrift.meta_data.FieldMetaData("paths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMESTAMPS, new org.apache.thrift.meta_data.FieldMetaData("timestamps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUES_LIST, new org.apache.thrift.meta_data.FieldMetaData("valuesList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DATA_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("dataTypeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class))));
    tmpMap.put(_Fields.ATTRIBUTES_LIST, new org.apache.thrift.meta_data.FieldMetaData("attributesList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertRecordsReq.class, metaDataMap);
  }

  public InsertRecordsReq() {
  }

  public InsertRecordsReq(
    long sessionId,
    java.util.List<java.lang.String> paths,
    java.nio.ByteBuffer timestamps,
    java.util.List<java.nio.ByteBuffer> valuesList,
    java.util.List<DataType> dataTypeList)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.paths = paths;
    this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(timestamps);
    this.valuesList = valuesList;
    this.dataTypeList = dataTypeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InsertRecordsReq(InsertRecordsReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetPaths()) {
      java.util.List<java.lang.String> __this__paths = new java.util.ArrayList<java.lang.String>(other.paths);
      this.paths = __this__paths;
    }
    if (other.isSetTimestamps()) {
      this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(other.timestamps);
    }
    if (other.isSetValuesList()) {
      java.util.List<java.nio.ByteBuffer> __this__valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(other.valuesList);
      this.valuesList = __this__valuesList;
    }
    if (other.isSetDataTypeList()) {
      java.util.List<DataType> __this__dataTypeList = new java.util.ArrayList<DataType>(other.dataTypeList.size());
      for (DataType other_element : other.dataTypeList) {
        __this__dataTypeList.add(other_element);
      }
      this.dataTypeList = __this__dataTypeList;
    }
    if (other.isSetAttributesList()) {
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.attributesList.size());
      for (java.util.Map<java.lang.String,java.lang.String> other_element : other.attributesList) {
        java.util.Map<java.lang.String,java.lang.String> __this__attributesList_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
        __this__attributesList.add(__this__attributesList_copy);
      }
      this.attributesList = __this__attributesList;
    }
  }

  public InsertRecordsReq deepCopy() {
    return new InsertRecordsReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.paths = null;
    this.timestamps = null;
    this.valuesList = null;
    this.dataTypeList = null;
    this.attributesList = null;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public InsertRecordsReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public int getPathsSize() {
    return (this.paths == null) ? 0 : this.paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPathsIterator() {
    return (this.paths == null) ? null : this.paths.iterator();
  }

  public void addToPaths(java.lang.String elem) {
    if (this.paths == null) {
      this.paths = new java.util.ArrayList<java.lang.String>();
    }
    this.paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPaths() {
    return this.paths;
  }

  public InsertRecordsReq setPaths(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> paths) {
    this.paths = paths;
    return this;
  }

  public void unsetPaths() {
    this.paths = null;
  }

  /** Returns true if field paths is set (has been assigned a value) and false otherwise */
  public boolean isSetPaths() {
    return this.paths != null;
  }

  public void setPathsIsSet(boolean value) {
    if (!value) {
      this.paths = null;
    }
  }

  public byte[] getTimestamps() {
    setTimestamps(org.apache.thrift.TBaseHelper.rightSize(timestamps));
    return timestamps == null ? null : timestamps.array();
  }

  public java.nio.ByteBuffer bufferForTimestamps() {
    return org.apache.thrift.TBaseHelper.copyBinary(timestamps);
  }

  public InsertRecordsReq setTimestamps(byte[] timestamps) {
    this.timestamps = timestamps == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(timestamps.clone());
    return this;
  }

  public InsertRecordsReq setTimestamps(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer timestamps) {
    this.timestamps = org.apache.thrift.TBaseHelper.copyBinary(timestamps);
    return this;
  }

  public void unsetTimestamps() {
    this.timestamps = null;
  }

  /** Returns true if field timestamps is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamps() {
    return this.timestamps != null;
  }

  public void setTimestampsIsSet(boolean value) {
    if (!value) {
      this.timestamps = null;
    }
  }

  public int getValuesListSize() {
    return (this.valuesList == null) ? 0 : this.valuesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getValuesListIterator() {
    return (this.valuesList == null) ? null : this.valuesList.iterator();
  }

  public void addToValuesList(java.nio.ByteBuffer elem) {
    if (this.valuesList == null) {
      this.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.valuesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getValuesList() {
    return this.valuesList;
  }

  public InsertRecordsReq setValuesList(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> valuesList) {
    this.valuesList = valuesList;
    return this;
  }

  public void unsetValuesList() {
    this.valuesList = null;
  }

  /** Returns true if field valuesList is set (has been assigned a value) and false otherwise */
  public boolean isSetValuesList() {
    return this.valuesList != null;
  }

  public void setValuesListIsSet(boolean value) {
    if (!value) {
      this.valuesList = null;
    }
  }

  public int getDataTypeListSize() {
    return (this.dataTypeList == null) ? 0 : this.dataTypeList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DataType> getDataTypeListIterator() {
    return (this.dataTypeList == null) ? null : this.dataTypeList.iterator();
  }

  public void addToDataTypeList(DataType elem) {
    if (this.dataTypeList == null) {
      this.dataTypeList = new java.util.ArrayList<DataType>();
    }
    this.dataTypeList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DataType> getDataTypeList() {
    return this.dataTypeList;
  }

  public InsertRecordsReq setDataTypeList(@org.apache.thrift.annotation.Nullable java.util.List<DataType> dataTypeList) {
    this.dataTypeList = dataTypeList;
    return this;
  }

  public void unsetDataTypeList() {
    this.dataTypeList = null;
  }

  /** Returns true if field dataTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetDataTypeList() {
    return this.dataTypeList != null;
  }

  public void setDataTypeListIsSet(boolean value) {
    if (!value) {
      this.dataTypeList = null;
    }
  }

  public int getAttributesListSize() {
    return (this.attributesList == null) ? 0 : this.attributesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getAttributesListIterator() {
    return (this.attributesList == null) ? null : this.attributesList.iterator();
  }

  public void addToAttributesList(java.util.Map<java.lang.String,java.lang.String> elem) {
    if (this.attributesList == null) {
      this.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.attributesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getAttributesList() {
    return this.attributesList;
  }

  public InsertRecordsReq setAttributesList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String,java.lang.String>> attributesList) {
    this.attributesList = attributesList;
    return this;
  }

  public void unsetAttributesList() {
    this.attributesList = null;
  }

  /** Returns true if field attributesList is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributesList() {
    return this.attributesList != null;
  }

  public void setAttributesListIsSet(boolean value) {
    if (!value) {
      this.attributesList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case PATHS:
      if (value == null) {
        unsetPaths();
      } else {
        setPaths((java.util.List<java.lang.String>)value);
      }
      break;

    case TIMESTAMPS:
      if (value == null) {
        unsetTimestamps();
      } else {
        if (value instanceof byte[]) {
          setTimestamps((byte[])value);
        } else {
          setTimestamps((java.nio.ByteBuffer)value);
        }
      }
      break;

    case VALUES_LIST:
      if (value == null) {
        unsetValuesList();
      } else {
        setValuesList((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case DATA_TYPE_LIST:
      if (value == null) {
        unsetDataTypeList();
      } else {
        setDataTypeList((java.util.List<DataType>)value);
      }
      break;

    case ATTRIBUTES_LIST:
      if (value == null) {
        unsetAttributesList();
      } else {
        setAttributesList((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case PATHS:
      return getPaths();

    case TIMESTAMPS:
      return getTimestamps();

    case VALUES_LIST:
      return getValuesList();

    case DATA_TYPE_LIST:
      return getDataTypeList();

    case ATTRIBUTES_LIST:
      return getAttributesList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case PATHS:
      return isSetPaths();
    case TIMESTAMPS:
      return isSetTimestamps();
    case VALUES_LIST:
      return isSetValuesList();
    case DATA_TYPE_LIST:
      return isSetDataTypeList();
    case ATTRIBUTES_LIST:
      return isSetAttributesList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InsertRecordsReq)
      return this.equals((InsertRecordsReq)that);
    return false;
  }

  public boolean equals(InsertRecordsReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_paths = true && this.isSetPaths();
    boolean that_present_paths = true && that.isSetPaths();
    if (this_present_paths || that_present_paths) {
      if (!(this_present_paths && that_present_paths))
        return false;
      if (!this.paths.equals(that.paths))
        return false;
    }

    boolean this_present_timestamps = true && this.isSetTimestamps();
    boolean that_present_timestamps = true && that.isSetTimestamps();
    if (this_present_timestamps || that_present_timestamps) {
      if (!(this_present_timestamps && that_present_timestamps))
        return false;
      if (!this.timestamps.equals(that.timestamps))
        return false;
    }

    boolean this_present_valuesList = true && this.isSetValuesList();
    boolean that_present_valuesList = true && that.isSetValuesList();
    if (this_present_valuesList || that_present_valuesList) {
      if (!(this_present_valuesList && that_present_valuesList))
        return false;
      if (!this.valuesList.equals(that.valuesList))
        return false;
    }

    boolean this_present_dataTypeList = true && this.isSetDataTypeList();
    boolean that_present_dataTypeList = true && that.isSetDataTypeList();
    if (this_present_dataTypeList || that_present_dataTypeList) {
      if (!(this_present_dataTypeList && that_present_dataTypeList))
        return false;
      if (!this.dataTypeList.equals(that.dataTypeList))
        return false;
    }

    boolean this_present_attributesList = true && this.isSetAttributesList();
    boolean that_present_attributesList = true && that.isSetAttributesList();
    if (this_present_attributesList || that_present_attributesList) {
      if (!(this_present_attributesList && that_present_attributesList))
        return false;
      if (!this.attributesList.equals(that.attributesList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetPaths()) ? 131071 : 524287);
    if (isSetPaths())
      hashCode = hashCode * 8191 + paths.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamps()) ? 131071 : 524287);
    if (isSetTimestamps())
      hashCode = hashCode * 8191 + timestamps.hashCode();

    hashCode = hashCode * 8191 + ((isSetValuesList()) ? 131071 : 524287);
    if (isSetValuesList())
      hashCode = hashCode * 8191 + valuesList.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataTypeList()) ? 131071 : 524287);
    if (isSetDataTypeList())
      hashCode = hashCode * 8191 + dataTypeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttributesList()) ? 131071 : 524287);
    if (isSetAttributesList())
      hashCode = hashCode * 8191 + attributesList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InsertRecordsReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaths()).compareTo(other.isSetPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paths, other.paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamps()).compareTo(other.isSetTimestamps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamps, other.timestamps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValuesList()).compareTo(other.isSetValuesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValuesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valuesList, other.valuesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataTypeList()).compareTo(other.isSetDataTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTypeList, other.dataTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttributesList()).compareTo(other.isSetAttributesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributesList, other.attributesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InsertRecordsReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paths:");
    if (this.paths == null) {
      sb.append("null");
    } else {
      sb.append(this.paths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamps:");
    if (this.timestamps == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.timestamps, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valuesList:");
    if (this.valuesList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.valuesList, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataTypeList:");
    if (this.dataTypeList == null) {
      sb.append("null");
    } else {
      sb.append(this.dataTypeList);
    }
    first = false;
    if (isSetAttributesList()) {
      if (!first) sb.append(", ");
      sb.append("attributesList:");
      if (this.attributesList == null) {
        sb.append("null");
      } else {
        sb.append(this.attributesList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (paths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paths' was not present! Struct: " + toString());
    }
    if (timestamps == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamps' was not present! Struct: " + toString());
    }
    if (valuesList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valuesList' was not present! Struct: " + toString());
    }
    if (dataTypeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataTypeList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InsertRecordsReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsertRecordsReqStandardScheme getScheme() {
      return new InsertRecordsReqStandardScheme();
    }
  }

  private static class InsertRecordsReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<InsertRecordsReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InsertRecordsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.paths = new java.util.ArrayList<java.lang.String>(_list42.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readString();
                  struct.paths.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamps = iprot.readBinary();
              struct.setTimestampsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(_list45.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readBinary();
                  struct.valuesList.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setValuesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.dataTypeList = new java.util.ArrayList<DataType>(_list48.size);
                @org.apache.thrift.annotation.Nullable DataType _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = cn.edu.tsinghua.iginx.thrift.DataType.findByValue(iprot.readI32());
                  if (_elem49 != null)
                  {
                    struct.dataTypeList.add(_elem49);
                  }
                }
                iprot.readListEnd();
              }
              struct.setDataTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ATTRIBUTES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list51.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  {
                    org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                    _elem52 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map54.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key55;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val56;
                    for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                    {
                      _key55 = iprot.readString();
                      _val56 = iprot.readString();
                      _elem52.put(_key55, _val56);
                    }
                    iprot.readMapEnd();
                  }
                  struct.attributesList.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setAttributesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InsertRecordsReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.paths != null) {
        oprot.writeFieldBegin(PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paths.size()));
          for (java.lang.String _iter58 : struct.paths)
          {
            oprot.writeString(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.timestamps != null) {
        oprot.writeFieldBegin(TIMESTAMPS_FIELD_DESC);
        oprot.writeBinary(struct.timestamps);
        oprot.writeFieldEnd();
      }
      if (struct.valuesList != null) {
        oprot.writeFieldBegin(VALUES_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.valuesList.size()));
          for (java.nio.ByteBuffer _iter59 : struct.valuesList)
          {
            oprot.writeBinary(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dataTypeList != null) {
        oprot.writeFieldBegin(DATA_TYPE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dataTypeList.size()));
          for (DataType _iter60 : struct.dataTypeList)
          {
            oprot.writeI32(_iter60.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attributesList != null) {
        if (struct.isSetAttributesList()) {
          oprot.writeFieldBegin(ATTRIBUTES_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.attributesList.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter61 : struct.attributesList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter61.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter62 : _iter61.entrySet())
                {
                  oprot.writeString(_iter62.getKey());
                  oprot.writeString(_iter62.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InsertRecordsReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsertRecordsReqTupleScheme getScheme() {
      return new InsertRecordsReqTupleScheme();
    }
  }

  private static class InsertRecordsReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<InsertRecordsReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InsertRecordsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      {
        oprot.writeI32(struct.paths.size());
        for (java.lang.String _iter63 : struct.paths)
        {
          oprot.writeString(_iter63);
        }
      }
      oprot.writeBinary(struct.timestamps);
      {
        oprot.writeI32(struct.valuesList.size());
        for (java.nio.ByteBuffer _iter64 : struct.valuesList)
        {
          oprot.writeBinary(_iter64);
        }
      }
      {
        oprot.writeI32(struct.dataTypeList.size());
        for (DataType _iter65 : struct.dataTypeList)
        {
          oprot.writeI32(_iter65.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAttributesList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAttributesList()) {
        {
          oprot.writeI32(struct.attributesList.size());
          for (java.util.Map<java.lang.String,java.lang.String> _iter66 : struct.attributesList)
          {
            {
              oprot.writeI32(_iter66.size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter67 : _iter66.entrySet())
              {
                oprot.writeString(_iter67.getKey());
                oprot.writeString(_iter67.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InsertRecordsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.paths = new java.util.ArrayList<java.lang.String>(_list68.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem69;
        for (int _i70 = 0; _i70 < _list68.size; ++_i70)
        {
          _elem69 = iprot.readString();
          struct.paths.add(_elem69);
        }
      }
      struct.setPathsIsSet(true);
      struct.timestamps = iprot.readBinary();
      struct.setTimestampsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.valuesList = new java.util.ArrayList<java.nio.ByteBuffer>(_list71.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem72;
        for (int _i73 = 0; _i73 < _list71.size; ++_i73)
        {
          _elem72 = iprot.readBinary();
          struct.valuesList.add(_elem72);
        }
      }
      struct.setValuesListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.dataTypeList = new java.util.ArrayList<DataType>(_list74.size);
        @org.apache.thrift.annotation.Nullable DataType _elem75;
        for (int _i76 = 0; _i76 < _list74.size; ++_i76)
        {
          _elem75 = cn.edu.tsinghua.iginx.thrift.DataType.findByValue(iprot.readI32());
          if (_elem75 != null)
          {
            struct.dataTypeList.add(_elem75);
          }
        }
      }
      struct.setDataTypeListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.attributesList = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list77.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            {
              org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem78 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map80.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key81;
              @org.apache.thrift.annotation.Nullable java.lang.String _val82;
              for (int _i83 = 0; _i83 < _map80.size; ++_i83)
              {
                _key81 = iprot.readString();
                _val82 = iprot.readString();
                _elem78.put(_key81, _val82);
              }
            }
            struct.attributesList.add(_elem78);
          }
        }
        struct.setAttributesListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

